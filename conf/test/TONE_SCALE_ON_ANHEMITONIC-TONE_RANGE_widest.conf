[DEFAULT]
# The DEFAULT section provides default values for all other sections.
# Later sections can override these values.

# DEFAULT [Paths]
# The directories used. If blank use current working directory.
INPUT_LYRICS_PATH =
INPUT_MUSIC_PATH =
OUTPUT_PATH =

# DEFAULT [Filenames]
# The files used.

INPUT_LYRICS_FILENAME = Lyrics.txt

# if INPUT_MUSIC_FILENAME is blank then MarkMelGen processes all the .mxl files in the INPUT_MUSIC_PATH directory.
INPUT_MUSIC_FILENAME = Music.mxl

# DEFAULT [MarkMelGen]
# MarkMelGen keys and values with usage comments.

# CADENCE_ALTERNATE_PHRASE_END - if True a cadence is forced on every second line.
CADENCE_ALTERNATE_PHRASE_END = False
# CADENCE_DUR_MIN - the minimum duration of the cadence final note.
CADENCE_DUR_MIN = 3.0
# CADENCE_SECTION_END - if True a cadence is forced on every section end.
CADENCE_SECTION_END = False

# Display graphs of pitch, pitch class, durations and a piano roll.
DISPLAY_GRAPHS = True
# Display the score in another application (MuseScore).
DISPLAY_SCORE = True

# DUR_SIMPLE2 if True any simple (beat divides into 2) duration is valid. This can avoid output corruption.
DUR_SIMPLE2 = True
# DUR_COMPOUND3 if True any complex (beat divides into 3) duration is valid.
DUR_COMPOUND3 = False
# DUR_MIN - The minimum duration. 0 = not checked.
# Use a fraction if the duration is inexpressible exactly as a float.  A fraction is defined with slash e.g. 2/3
DUR_MIN = 0
# DUR_MAX - The maximum duration. 0 = not checked.
DUR_MAX = 0
# DUR_PREV_DIFF - compare duration with previous duration, e.g. where 2, duration is >= 1/2 previous and <= 2 x previous etc , where 0, do not compare with previous duration.
DUR_PREV_DIFF = 0

# INSTRUMENT
# Full list of instruments at https://raw.githubusercontent.com/cuthbertLab/music21/master/music21/instrument.py
# right click Save as... and search for instrumentName e.g.
# find "self.instrumentName =" instrument.py
# find "self.instrumentName =" instrument.py | find "Piano"
# INSTRUMENT = Electric Piano
# INSTRUMENT = Harmonica
# INSTRUMENT = Violin
# INSTRUMENT = Violoncello
# INSTRUMENT = Guitar
# INSTRUMENT = Flute
# INSTRUMENT = Oboe
# INSTRUMENT = Clarinet
# INSTRUMENT = Saxophone
# INSTRUMENT = Trumpet
# INSTRUMENT = Voice
INSTRUMENT = Piano

# MAX_PHRASE_REST - when analysing rests, ignore rests longer than MAX_PHRASE_REST e.g. ignore initial rests, instrumental break rests, end of song rests
MAX_PHRASE_REST = 8.0

# REST_NOTE_LINE_OFFSET_SONG  if not blank then force given offset on the first note of each line
REST_NOTE_LINE_OFFSET_SONG =
REST_NOTE_LINE_OFFSET_INTRO =
REST_NOTE_LINE_OFFSET_VERSE =
REST_NOTE_LINE_OFFSET_PRE_CHORUS =
REST_NOTE_LINE_OFFSET_CHORUS =
REST_NOTE_LINE_OFFSET_BREAK =
REST_NOTE_LINE_OFFSET_BRIDGE =
REST_NOTE_LINE_OFFSET_OUTRO =

# TEMPO_BPM when 0.0, tempo is taken from INPUT_MUSIC. If INPUT_MUSIC has no tempo, default to 120.0 otherwise use given tempo in quarter note beats per minute
TEMPO_BPM = 0.0

# TIME_SIG_WANTED if not blank then force given time signature
TIME_SIG_WANTED =

# Tone filters

# TONE_ASCENT True triggers a sequence of notes rising in pitch when TONE_RANGE_MIN is reached until the middle of the tone range is achieved.
TONE_ASCENT = False
# TONE_ASCENT_MIN_INTERVAL - (>=2) after TONE_ASCENT_TRIGGERED, sets minimum semitone interval from previous tone
# 2 gives runs up scale, 3 gives ascent leaps, 4 gives ascent chord arpeggio
TONE_ASCENT_MIN_INTERVAL = 5
# TONE_ASCENT_TRIGGER_EVERY_N_TIMES - only trigger the ascent every Nth time the trigger tone occurs
TONE_ASCENT_TRIGGER_EVERY_N_TIMES = 1

# TONE_DESCENT True triggers a cascade down when TONE_RANGE_MAX is reached until the middle of the tone range is achieved.
TONE_DESCENT = False
# TONE_DESCENT_MAX_INTERVAL - (>=2) after TONE_DESCENT_TRIGGERED, sets maximum semitone interval from previous tone
# 2 gives runs down scale, 3 gives descent leaps, 4 gives descent chord arpeggio
TONE_DESCENT_MAX_INTERVAL = 2
# TONE_DESCENT_TRIGGER_EVERY_N_TIMES - only trigger the descent every Nth time the trigger tone occurs
TONE_DESCENT_TRIGGER_EVERY_N_TIMES = 1

# TONE_INTERVAL = smallest | largest | random.
# The default is smallest interval between tones e.g. choose C4 to B3, not C4 to B4
TONE_INTERVAL = smallest

# TONES_ON_KEY - if tone is in scale then tone is valid
TONES_ON_KEY = False
# TONES_OFF_KEY - if tone is not in scale then tone is valid (currently NA to first/last tone)
TONES_OFF_KEY = False

# TONE_PREV_INTERVAL - maximum number of semitones between notes.
# 0 = Off, do not compare with previous tone
# 1 caused hang together with TONE_SCALE_ON_NEW = True
# 2-3 very limited melodic movement
# 4 limited melodic movement
# 5 - 6 lightly limited melodic movement
# 7 normal melodic movement
# 8 - 9 slightly jumpy melodic movement
# >= 10  jumpy melodic movement
TONE_PREV_INTERVAL = 0

# TONE_RANGE_MIN / TONE_RANGE_MAX - change to suit the desired output note range.
# The max octave is 9.
# Note: The octave number changes at C, e.g. A3, B3, C4, D4, E4 etc. C4 is middle C.
# Female
# Soprano:	C4 to C6
# TONE_RANGE_MIN = C4
# TONE_RANGE_MAX = C6
# Mezzo-soprano: A3 to A5
# TONE_RANGE_MIN = A3
# TONE_RANGE_MAX = A5
# Contralto F3 to F5
# TONE_RANGE_MIN = F3
# TONE_RANGE_MAX = F5
# Male:
# Tenor: B2 to B4
# TONE_RANGE_MIN = B2
# TONE_RANGE_MAX = B4
# Baritone: G2 to G4
# TONE_RANGE_MIN = G2
# TONE_RANGE_MAX = G4
# Bass: E2 to E4
# TONE_RANGE_MIN = E2
# TONE_RANGE_MAX = E4
# One octave range
# TONE_RANGE_MIN = C4
# TONE_RANGE_MAX = B4
# My Modal range (from free Piano tuner app)
# TONE_RANGE_MIN = C2
# TONE_RANGE_MAX = C4
# My Falsetto range
# TONE_RANGE_MIN = C4
# TONE_RANGE_MAX = C5
# My Modal and Falsetto range
# TONE_RANGE_MIN = C2
# TONE_RANGE_MAX = C5
# Male-Female joint range
# TONE_RANGE_MIN = C2
# TONE_RANGE_MAX = C6
# Greensleeves range:
# TONE_RANGE_MIN = E4
# TONE_RANGE_MAX = G5
TONE_RANGE_MIN = C3
TONE_RANGE_MAX = C5

# TONE_SCALE_NEW - user defined scale steps from which to pick tones
TONE_SCALE_NEW: [2, 3, 4, 6, 7]
# TONE_SCALE_ON_ANHEMITONIC - if True, valid scale tones are [1, 2, 4, 5, 6]
TONE_SCALE_ON_ANHEMITONIC = False
# TONE_SCALE_ON_HEMITONIC - if True, valid scale tones are [1, 3, 4, 5, 7]
TONE_SCALE_ON_HEMITONIC = False
# TONE_SCALE_ON_NEW -  if True, valid scale tones are [2, 3, 4, 6, 7] (depends if NEW re-defined)
TONE_SCALE_ON_NEW = False

[Paths]
INPUT_LYRICS_PATH = input/lyrics/
INPUT_MUSIC_PATH = input/music/
OUTPUT_PATH = output/

[Filenames]
INPUT_LYRICS_FILENAME = NoLyrics123abc-AllSectionsTwice.txt
INPUT_MUSIC_FILENAME =

[MarkMelGen]
# CADENCE_ALTERNATE_PHRASE_END = True
# CADENCE_DUR_MIN = 2.0
# CADENCE_SECTION_END = False

# DISPLAY_GRAPHS = False
# DISPLAY_SCORE = False

# DUR_SIMPLE2 = False
# DUR_COMPOUND3 = True
# DUR_MIN = 0.25
# DUR_MIN = 2/3
# DUR_MAX = 2.0
# DUR_PREV_DIFF = 2.0

# INSTRUMENT = Voice

# MAX_PHRASE_REST = 4.0

# REST_NOTE_LINE_OFFSET_SONG = 0.0
# REST_NOTE_LINE_OFFSET_INTRO = 0.5
# REST_NOTE_LINE_OFFSET_VERSE = 1.0
# REST_NOTE_LINE_OFFSET_PRE_CHORUS = 1.5
# REST_NOTE_LINE_OFFSET_CHORUS = 2.0
# REST_NOTE_LINE_OFFSET_BREAK = 2.5
# REST_NOTE_LINE_OFFSET_BRIDGE = 3.0
# REST_NOTE_LINE_OFFSET_OUTRO = 3.5

# TEMPO_BPM = 123.4

# TIME_SIG_WANTED = '3/4'

# TONE_ASCENT = True
# TONE_ASCENT_MIN_INTERVAL = 2
# TONE_ASCENT_TRIGGER_EVERY_N_TIMES = 2

# TONE_DESCENT = True
# TONE_DESCENT_MAX_INTERVAL = 5
# TONE_DESCENT_TRIGGER_EVERY_N_TIMES = 4

TONE_INTERVAL = largest
# TONE_INTERVAL = random

# TONES_ON_KEY = True
# TONES_OFF_KEY = True

# TONE_PREV_INTERVAL = 4
# TONE_PREV_INTERVAL = 7
# TONE_PREV_INTERVAL = 10

TONE_RANGE_MIN = C0
TONE_RANGE_MAX = C9

# TONE_SCALE_NEW: [3, 4, 6, 7]
TONE_SCALE_ON_ANHEMITONIC = True
# TONE_SCALE_ON_HEMITONIC = True
# TONE_SCALE_ON_NEW = True