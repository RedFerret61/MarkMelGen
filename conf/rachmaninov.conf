[paths]
# The directories used. If blank use current working directory.
# INPUT_LYRICS_PATH =
INPUT_LYRICS_PATH = input/lyrics/

# INPUT_MUSIC_PATH =
# INPUT_MUSIC_PATH = input/music/
INPUT_MUSIC_PATH = input/music/rachmaninov/

# OUTPUT_PATH =
OUTPUT_PATH = output/




[filenames]
# INPUT_LYRICS_FILENAME = Lyrics.txt
INPUT_LYRICS_FILENAME = lovePopHappy.txt

# if INPUT_MUSIC_FILENAME is blank then MarkMelGen processes all the .mxl files in the INPUT_MUSIC_PATH directory.
# INPUT_MUSIC_FILENAME = Music.mxl
INPUT_MUSIC_FILENAME =




[markmelgen]

# CADENCE_ALTERNATE_PHRASE_END - if True a cadence is forced on every second line.
CADENCE_ALTERNATE_PHRASE_END = False
# CADENCE_ALTERNATE_PHRASE_END = True

# CADENCE_DUR_MIN - the minimum duration of the cadence final note.
CADENCE_DUR_MIN = 3.0
# CADENCE_SECTION_END - if True a cadence is forced on every section end.
CADENCE_SECTION_END = False

# CADENCE_TONE_FREQUENCY is a list of cadence tone name and frequency pairs, where the tone name is A to G, and the frequency count is 1 or more.
# if not blank then it overrides the derived Cadence Markov Chain.
# Note: A cadence may be considered as "weak" or "strong" depending on the impression of finality it gives.
CADENCE_TONE_FREQUENCY =
#
# Examples of CADENCE_TONE_FREQUENCY for modes.
# Mode A (Aeolian - minor) -----------------------------------------------------------------------------------------
# A5 (making a chord from the cadence notes)
# CADENCE_TONE_FREQUENCY = [['A', 9], ['E', 6]]
# Am
# CADENCE_TONE_FREQUENCY = [['A', 4], ['C', 5], ['E', 11]]
# A7
# CADENCE_TONE_FREQUENCY = [['A', 6], ['E', 3], ['G', 2]]
# Am7s4
# CADENCE_TONE_FREQUENCY = [['A', 3], ['C', 2], ['D', 2], ['E', 2], ['G', 4]]
# Am and Em
# CADENCE_TONE_FREQUENCY = [['A', 6], ['B', 1], ['C', 1], ['E', 4], ['G', 2]]
# Am and Em7
# CADENCE_TONE_FREQUENCY = [['A', 3], ['B', 7], ['C', 4], ['E', 2], ['G', 1]]
# Mode B (Locrian - discordant tri-tone) --------------------------------------------------------------------------
# CADENCE_TONE_FREQUENCY = [['B', 6], ['F', 3]]
# Mode C (Ionian - major) -----------------------------------------------------------------------------------------
# C9
# CADENCE_TONE_FREQUENCY = [['C', 1], ['D', 2], ['E', 5], ['G', 2]]
# C9
# CADENCE_TONE_FREQUENCY = [['C', 2], ['D', 1], ['F', 2], ['G', 2]]
# C
# CADENCE_TONE_FREQUENCY = [['A', 1], ['C', 5], ['D', 1],  ['E', 2], ['F', 1], ['G', 3]]
# C
# CADENCE_TONE_FREQUENCY = [['B', 1], ['C', 6], ['D', 2],  ['E', 1], ['F', 2], ['G', 3]]
# Mode D (Dorian - serious,	any feeling	happy, taming the passions) -----------------------------------------------
# D9
# CADENCE_TONE_FREQUENCY = [['A', 3], ['D', 10], ['E', 8], ['G', 1]]
# D
# CADENCE_TONE_FREQUENCY = [['A', 3], ['C', 1], ['D', 4], ['G', 1]]
# Dm & Am
# CADENCE_TONE_FREQUENCY = [['A', 7], ['C', 7], ['D', 3], ['E', 9], ['F', 2]]
# Mode E (Phrygian - mystic, vehement, inciting anger) ------------------------------------------------------------
# Em
# CADENCE_TONE_FREQUENCY = [['E', 8], ['G', 4]]
# Em7
# CADENCE_TONE_FREQUENCY = [['B', 3], ['D', 1], ['E', 4], ['G', 1]]
# Mode F (Lydian - happy, happy, happy) ---------------------------------------------------------------------------
# CADENCE_TONE_FREQUENCY = [['A', 1], ['C', 1], ['F', 4], ['G', 1]]
# Mode G (Mixolydian - angelical, of youth, uniting pleasure and sadness) -----------------------------------------
# CADENCE_TONE_FREQUENCY = [['A', 1], ['D', 3], ['E', 1], ['G', 4]]
#
# Test example with all pitch frequency=1
# CADENCE_TONE_FREQUENCY = [['C-', 1], ['C', 1], ['C#', 1], ['D-', 1], ['D', 1], ['D#', 1], ['E-', 1], ['E', 1], ['E#', 1], ['F-', 1], ['F', 1], ['F#', 1], ['G-', 1], ['G', 1], ['G#', 1], ['A-', 1], ['A', 1], ['A#', 1], ['B-', 1], ['B', 1], ['B#', 1]]

# Display graphs of pitch, pitch class, durations and a piano roll.
DISPLAY_GRAPHS = True
# DISPLAY_GRAPHS = False

# Display the score in another application (MuseScore).
DISPLAY_SCORE = True
# DISPLAY_SCORE = False

# DUR_SIMPLE2 if True any simple (beat divides into 2) duration is valid. This can avoid output corruption.
DUR_SIMPLE2 = True
# DUR_SIMPLE2 = False

# DUR_COMPOUND3 if True any complex (beat divides into 3) duration is valid.
DUR_COMPOUND3 = False
# DUR_COMPOUND3 = True

# DUR_MIN - The minimum duration. 0 = not checked.
# Use a fraction if the duration is inexpressible exactly as a float.  A fraction is defined with slash e.g. 2/3
# DUR_MIN = 0
DUR_MIN = 0.25
# DUR_MIN = 1/6

# DUR_MAX - The maximum duration. 0 = not checked.
# DUR_MAX = 0
DUR_MAX = 2.0
# DUR_MAX = 2/3

# DUR_PREV_DIFF - compare duration with previous duration.
# e.g. where 2, duration is valid when >= 1/2 previous and <= 2 x previous etc ,
# where 0 or <= 1, do not compare with previous duration.
DUR_PREV_DIFF = 0
# DUR_PREV_DIFF = 2.0

# INSTRUMENT
# Full list of instruments at https://raw.githubusercontent.com/cuthbertLab/music21/master/music21/instrument.py
# right click Save as... and search for instrumentName e.g.
# find "self.instrumentName =" instrument.py
# find "self.instrumentName =" instrument.py | find "Piano"
INSTRUMENT = Piano
# INSTRUMENT = Clarinet
# INSTRUMENT = Electric Piano
# INSTRUMENT = Flute
# INSTRUMENT = Guitar
# INSTRUMENT = Harmonica
# INSTRUMENT = Oboe
# INSTRUMENT = Saxophone
# INSTRUMENT = Trumpet
# INSTRUMENT = Violin
# INSTRUMENT = Violoncello
# INSTRUMENT = Voice

# MAX_PHRASE_REST - when analysing rests, ignore rests longer than MAX_PHRASE_REST e.g. ignore initial rests, instrumental break rests, end of song rests
# MAX_PHRASE_REST = 4.0
MAX_PHRASE_REST = 8.0

# REST_NOTE_LINE_OFFSET_SONG  if not blank then force given offset for each line. = 0.0 is first beat, 3.0 means start lyric on fourth beat.
REST_NOTE_LINE_OFFSET_SONG = 2.0
REST_NOTE_LINE_OFFSET_INTRO =
REST_NOTE_LINE_OFFSET_VERSE =
REST_NOTE_LINE_OFFSET_PRE_CHORUS =
REST_NOTE_LINE_OFFSET_CHORUS =
REST_NOTE_LINE_OFFSET_BREAK =
REST_NOTE_LINE_OFFSET_BRIDGE =
REST_NOTE_LINE_OFFSET_OUTRO =

# REST_NOTE_LINE_OFFSET_SONG = 0.0
# REST_NOTE_LINE_OFFSET_INTRO = 0.5
# REST_NOTE_LINE_OFFSET_VERSE = 1.0
# REST_NOTE_LINE_OFFSET_PRE_CHORUS = 1.5
# REST_NOTE_LINE_OFFSET_CHORUS = 2.0
# REST_NOTE_LINE_OFFSET_BREAK = 2.5
# REST_NOTE_LINE_OFFSET_BRIDGE = 3.0
# REST_NOTE_LINE_OFFSET_OUTRO = 3.5

# TEMPO_BPM when 0.0, tempo is taken from INPUT_MUSIC. If INPUT_MUSIC has no tempo, default to 120.0 otherwise use given tempo in quarter note beats per minute
# TEMPO_BPM = 0.0
# TEMPO_BPM = 123.4
TEMPO_BPM = 122.0

# TIME_SIG_WANTED if not blank then force given time signature e.g. 4/4
TIME_SIG_WANTED =
# TIME_SIG_WANTED = '3/4'

# Tone filters

# TONE_ASCENT True triggers a sequence of notes rising in pitch when TONE_RANGE_MIN is reached until the middle of the tone range is achieved.
TONE_ASCENT = False
# TONE_ASCENT = True

# TONE_ASCENT_MIN_INTERVAL - (>=2) after TONE_ASCENT_TRIGGERED, sets minimum semitone interval from previous tone
# 2 gives runs up scale, 3 gives ascent leaps, 4 gives ascent chord arpeggio
# TONE_ASCENT_MIN_INTERVAL = 2
TONE_ASCENT_MIN_INTERVAL = 5

# TONE_ASCENT_TRIGGER_EVERY_N_TIMES - only trigger the ascent every Nth time the trigger tone occurs
TONE_ASCENT_TRIGGER_EVERY_N_TIMES = 1
# TONE_ASCENT_TRIGGER_EVERY_N_TIMES = 2

# TONE_DESCENT True triggers a cascade down when TONE_RANGE_MAX is reached until the middle of the tone range is achieved.
TONE_DESCENT = False
# TONE_DESCENT = True

# TONE_DESCENT_MAX_INTERVAL - (>=2) after TONE_DESCENT_TRIGGERED, sets maximum semitone interval from previous tone
# 2 gives runs down scale, 3 gives descent leaps, 4 gives descent chord arpeggio
TONE_DESCENT_MAX_INTERVAL = 2
# TONE_DESCENT_MAX_INTERVAL = 5

# TONE_DESCENT_TRIGGER_EVERY_N_TIMES - only trigger the descent every Nth time the trigger tone occurs
TONE_DESCENT_TRIGGER_EVERY_N_TIMES = 1
# TONE_DESCENT_TRIGGER_EVERY_N_TIMES = 4

# TONE_EQ is is a list of tone name and frequency factor pairs, where the tone name is A to G, and the frequency multiplier factor is a positive real number > 0.0.
# # if not blank then it allows the Markov selection of each pitch to be increased when > 1.0 or decreased when > 0.0 and < 1.0.
TONE_EQ =
#
# Examples of TONE_EQ to simulate modes.
# Note: here a "Mode" is a type of musical scale defined by their starting primary pitch (a final) or tonic.
# The modal final note functions as a relational center. The dominant tone of a mode is a fifth above the final.
# Mode A (Aeolian - minor) -----------------------------------------------------------------------------------------
# TONE_EQ = [['A', 4.0], ['E', 3.0]]
# Mode B (Locrian - discordant tri-tone) --------------------------------------------------------------------------
# TONE_EQ = [['B', 4.0], ['F', 3.0]]
# Mode C (Ionian - major) -----------------------------------------------------------------------------------------
# TONE_EQ = [['C', 4.0], ['G', 3.0]]
# Mode D (Dorian - serious,	any feeling	happy, taming the passions) -----------------------------------------------
# TONE_EQ = [['D', 4.0], ['A', 3.0]]
# Mode E (Phrygian - mystic, vehement, inciting anger) ------------------------------------------------------------
# TONE_EQ = [['E', 4.0], ['B', 3.0]]
# Mode F (Lydian - happy, happy, happy) ---------------------------------------------------------------------------
# TONE_EQ = [['F', 4.0], ['C', 3.0]]
# Mode G (Mixolydian - angelical, of youth, uniting pleasure and sadness) -----------------------------------------
# TONE_EQ = [['G', 4.0], ['D', 3.0]]
#
# Test example which boosts A, C and E, with other scale tones flat, and reduces accidentals:
# TONE_EQ = [['C-', 0.1], ['C', 4.0], ['C#', 0.1], ['D-', 0.1], ['D', 1.0], ['D#', 0.1], ['E-', 0.1], ['E', 4.0], ['E#', 0.1], ['F-', 0.1], ['F', 1.0], ['F#', 0.1], ['G-', 0.1], ['G', 1.0], ['G#', 0.1], ['A-', 0.1], ['A', 4.0], ['A#', 0.1], ['B-', 0.1], ['B', 1.0], ['B#', 0.1]]

# TONE_INTERVAL = smallest | largest | random.
# The default is smallest interval between tones e.g. choose smallest C4 to B3, not largest C4 to B4
TONE_INTERVAL = smallest
# TONE_INTERVAL = largest
# TONE_INTERVAL = random

# TONES_ON_KEY - if tone is in scale then tone is valid
# TONES_ON_KEY = False
TONES_ON_KEY = True

# TONES_OFF_KEY - if tone is not in scale then tone is valid (currently NA to first/last tone)
TONES_OFF_KEY = False
# TONES_OFF_KEY = True

# TONE_PREV_INTERVAL - maximum number of semitones between notes.
# 0 = Off, do not compare with previous tone
# 1 caused hang together with TONE_SCALE_ON_NEW = True
# 2-3 very limited melodic movement
# 4 limited melodic movement
# 5 - 6 lightly limited melodic movement
# 7 normal melodic movement
# 8 - 9 slightly jumpy melodic movement
# >= 10  jumpy melodic movement, use with TONE_INTERVAL = largest
TONE_PREV_INTERVAL = 0
# TONE_PREV_INTERVAL = 4

# TONE_RANGE_MIN / TONE_RANGE_MAX - change to suit the desired vocal range.
# Note: consider "tessitura" - the best notes in your range.
# Note: The octave number changes at C, e.g. A3, B3, C4, D4, E4 etc. C4 is middle C.
# Female
# Soprano:	C4 to C6
# TONE_RANGE_MIN = C4
# TONE_RANGE_MAX = C6
# Mezzo-soprano: A3 to A5
# TONE_RANGE_MIN = A3
# TONE_RANGE_MAX = A5
# Contralto F3 to F5
# TONE_RANGE_MIN = F3
# TONE_RANGE_MAX = F5
# Male:
# Tenor: B2 to B4
# TONE_RANGE_MIN = B2
# TONE_RANGE_MAX = B4
# Baritone: G2 to G4
# TONE_RANGE_MIN = G2
# TONE_RANGE_MAX = G4
# Bass: E2 to E4
# TONE_RANGE_MIN = E2
# TONE_RANGE_MAX = E4
# One octave range
# TONE_RANGE_MIN = C4
# TONE_RANGE_MAX = B4
# My Modal range (from free Piano tuner app)
# TONE_RANGE_MIN = C2
# TONE_RANGE_MAX = C4
# My Falsetto range - Falsetto (adult male head voice) is Italian for false soprano
# TONE_RANGE_MIN = C4
# TONE_RANGE_MAX = C5
# My Modal and Falsetto range
# TONE_RANGE_MIN = C2
# TONE_RANGE_MAX = C5
# Male-Female joint range
# TONE_RANGE_MIN = C2
# TONE_RANGE_MAX = C6
# Greensleeves range:
# TONE_RANGE_MIN = E4
# TONE_RANGE_MAX = G5
TONE_RANGE_MIN = C3
TONE_RANGE_MAX = C5

# TONE_SCALE_NEW - user defined scale steps from which to pick tones
TONE_SCALE_NEW: [2, 3, 4, 6, 7]
# TONE_SCALE_NEW: [3, 4, 6, 7]

# TONE_SCALE_ON_ANHEMITONIC - if True, valid scale tones are [1, 2, 4, 5, 6]
TONE_SCALE_ON_ANHEMITONIC = False
# TONE_SCALE_ON_ANHEMITONIC = True

# TONE_SCALE_ON_HEMITONIC - if True, valid scale tones are [1, 3, 4, 5, 7]
TONE_SCALE_ON_HEMITONIC = False
# TONE_SCALE_ON_HEMITONIC = True

# TONE_SCALE_ON_NEW -  if True, valid scale tones are [2, 3, 4, 6, 7] (depends if TONE_SCALE_NEW is re-defined)
TONE_SCALE_ON_NEW = False




# optional song section specific options, uncomment (remove #) and change values if you want to change the margmelgen options for a specific song section
[song_intro]
DUR_SIMPLE2 = False
DUR_COMPOUND3 = True
DUR_MIN = 1/3
DUR_MAX = 1/3
TONES_ON_KEY = False
TONE_RANGE_MIN = D4
TONE_RANGE_MAX = D5




[song_verse]
DUR_SIMPLE2 = True
DUR_COMPOUND3 = False
DUR_MIN = 0.5
DUR_MAX = 1.0
TONES_ON_KEY = False
TONE_RANGE_MIN = E3
TONE_RANGE_MAX = E6




[song_pre_chorus]
DUR_SIMPLE2 = True
DUR_COMPOUND3 = False
DUR_MIN = 0.25
DUR_MAX = 0.5
TONES_ON_KEY = False
TONE_RANGE_MIN = C3
TONE_RANGE_MAX = G3




[song_chorus]
DUR_SIMPLE2 = True
DUR_COMPOUND3 = False
DUR_MIN = 1.0
DUR_MAX = 2.0
TONES_ON_KEY = True
TONE_RANGE_MIN = G3
TONE_RANGE_MAX = G4




[song_break]
DUR_SIMPLE2 = True
DUR_COMPOUND3 = False
DUR_MIN = 0.25
DUR_MAX = 2.0
TONES_ON_KEY = True
TONE_RANGE_MIN = C4
TONE_RANGE_MAX = C5




[song_bridge]
DUR_SIMPLE2 = True
DUR_COMPOUND3 = False
DUR_MIN = 1.0
DUR_MAX = 1.0
TONES_ON_KEY = False
TONE_RANGE_MIN = C3
TONE_RANGE_MAX = C4




[song_outro]
DUR_SIMPLE2 = False
DUR_COMPOUND3 = True
DUR_MIN = 1/3
DUR_MAX = 1/3
TONES_ON_KEY = True
TONE_RANGE_MIN = C4
TONE_RANGE_MAX = C5